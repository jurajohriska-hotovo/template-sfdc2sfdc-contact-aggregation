<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce Org to Org Contact Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator I want to aggregate contacts from two Salesforce instances and compare them to see which contacts can only be found in one of the two and which contacts are in both instances. 

This template generates the result in the format of a CSV Report sent by mail.

This template serves as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

This template contacts from two instances of Salesforce, compares by the email address of the contacts, and generates a CSV file which shows contact in A, contact in B, and contacts in A and B. The report is sent by email to a configured group of email addresses.
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for all to run smoothly. Failing to do so can lead to unexpected behavior of the template.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After you have your app running, if you chose as domain name `sfdccontactaggregation` to trigger the use case, browse to `http://sfdccontactaggregation.cloudhub.io/generatereport` and the report is sent to the emails you configured.
]]>
		</section>
		<section id="default_running_on_premise">
<![CDATA[
Complete all properties in one of the property files, for example in mule.prod.properties and run your app with the corresponding environment variable to use it. To follow this example, use `mule.env=prod`.

After this, to trigger the use case you just need to browse to the HTTP endpoint with the port you configured in your file. If this is, for instance, `9090` then browse to `http://localhost:9090/generatereport` and this creates a CSV report and send it to the mails set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 

### Salesforce Connector Configuration for Company A

+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/42.0`

### Salesforce Connector Configuration for Company B

+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.url `https://login.salesforce.com/services/Soap/u/42.0`

### SMTP Services Configuration

+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser@example.com`
+ smtp.password `ExamplePassword456`

### Email Details

+ mail.from `exampleuser@example.com`
+ mail.to `woody.guthrie@example.com`
+ mail.subject `SFDC Contacts Report`
+ mail.body `Contacts report comparing contacts from SFDC Accounts`
+ attachment.name `OrderedReport.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. This template only makes one API call to Salesforce during aggregation. 
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you find the endpoint to start the aggregation. This template has an HTTP Listener as the way to trigger the use case.

$H$H# Trigger Flow
**HTTP Listener** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub routes requests from your application domain URL to the endpoint.

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of the template is implemented in this XML file, directed by a flow responsible of conducting the aggregation of data, comparing records and finally formatting the output, in this case being a report.

Using the Scatter-Gather component we are querying the data in different systems. After that the aggregation is implemented in a DataWeave 2 script using the Transform component.
Aggregated results are sorted by source of existence:

1. Contacts only in Salesforce A
2. Contacts only in Salesforce B
3. Contacts in both Salesforce A and Salesforce B

The output is transformed to CSV format. The final report in CSV format is sent to the email addresses that you configured in the `mule.*.properties` file.
]]>
		</section>
	</sections>
</configuration>
